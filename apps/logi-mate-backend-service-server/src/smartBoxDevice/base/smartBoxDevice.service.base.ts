/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SmartBoxDevice as PrismaSmartBoxDevice } from "@prisma/client";

export class SmartBoxDeviceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SmartBoxDeviceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.smartBoxDevice.count(args);
  }

  async smartBoxDevices(
    args: Prisma.SmartBoxDeviceFindManyArgs
  ): Promise<PrismaSmartBoxDevice[]> {
    return this.prisma.smartBoxDevice.findMany(args);
  }
  async smartBoxDevice(
    args: Prisma.SmartBoxDeviceFindUniqueArgs
  ): Promise<PrismaSmartBoxDevice | null> {
    return this.prisma.smartBoxDevice.findUnique(args);
  }
  async createSmartBoxDevice(
    args: Prisma.SmartBoxDeviceCreateArgs
  ): Promise<PrismaSmartBoxDevice> {
    return this.prisma.smartBoxDevice.create(args);
  }
  async updateSmartBoxDevice(
    args: Prisma.SmartBoxDeviceUpdateArgs
  ): Promise<PrismaSmartBoxDevice> {
    return this.prisma.smartBoxDevice.update(args);
  }
  async deleteSmartBoxDevice(
    args: Prisma.SmartBoxDeviceDeleteArgs
  ): Promise<PrismaSmartBoxDevice> {
    return this.prisma.smartBoxDevice.delete(args);
  }
}
